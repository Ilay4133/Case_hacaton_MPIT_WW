import flet as ft
import sqlite3
def main(page: ft.Page):
    page.scroll = "always"
    page.title = "Шаблон регистрации и входа"
    page.theme_mode = "dark"
    db = sqlite3.connect('Users1.data')
    page.vertical_alignment = ft.MainAxisAlignment.CENTER
    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER
    page.update()
    cur = db.cursor()
    cur.execute("""CREATE TABLE IF NOT EXISTS Users (
                name TEXT PRIMARY KEY,
                last_name TEXT,
                otchestvo TEXT,
                password TEXT,
                age INTEGER,
                pol TEXT,
                city TEXT)""")

    def snack_bar_open():
        page.snack_bar = ft.SnackBar(ft.Text(value="Вы не заполнили все поля", color='#FFFFFF'), bgcolor='#1DB100')
        page.snack_bar.open = True
        page.update()

    def snack_bar_open_whod():
        page.snack_bar = ft.SnackBar(ft.Text(value="Нет такого пользователя",color='#FFFFFF'),bgcolor='#1DB100')
        page.snack_bar.open = True
        page.update()

    def snack_bar_open_reg():
        page.snack_bar = ft.SnackBar(ft.Text(value="Такой пользователь уже есть", color='#FFFFFF'), bgcolor='#1DB100')
        page.snack_bar.open = True
        page.update()

    def registration(e):
        global new_user_enter
        new_user_enter = 1
        if any(field.value == "" for field in
               [name_field_reg, last_name_field_reg, otchestvo_field_reg, pas_field_reg, age_field_reg,
                city_field_reg]):
            snack_bar_open()
        else:
            try:
                db = sqlite3.connect('Users1.data')
                cur = db.cursor()
                values = (
                    str(name_field_reg.value),
                    str(last_name_field_reg.value),
                    str(otchestvo_field_reg.value),
                    str(pas_field_reg.value),
                    int(age_field_reg.value),
                    str(pol_vebor.value),
                    str(city_field_reg.value)
                )
                cur.execute(
                    "INSERT INTO Users (name, last_name, otchestvo, password, age, pol, city) VALUES(?,?,?,?,?,?,?)",
                    values)
                db.commit()
                open = lambda: page.open(dlg_reg)
                open()
            except sqlite3.Error as e:
                snack_bar_open_reg()
            finally:
                cur.close()
                db.close()


    def vhod_ac(e):
        admin = "Ilay"
        admin_pas = "3101"
        db = sqlite3.connect('Users1.data')
        cur = db.cursor()
        cur.execute("SELECT * FROM Users WHERE name=?", (name_field_vhod.value,))
        user = cur.fetchall()
        if user == []:
            snack_bar_open_whod()
        for row in user:
            if row[0] == admin:
                if row[3] == admin_pas:
                    page.bgcolor = '#E8FFE0'
                    open.open_admin_panel()
                else:
                    pass
            else:
                if row[3] == pas_field_vhod.value:
                    page.bgcolor = '#E8FFE0'
                    if new_user_enter != 1:
                        open.open_user_panel()
                else:
                    pass
        cur.close()
        db.close()

    class open():
        def open_user_panel(self):
            pass

        def open_admin_panel(self):
            pass

        def open_reg_window(e):
            reg_column.visible = True
            go_to_reg.visible = False
            go_to_vhod.visible = False
            back_start_but.visible = True
            page.update()

        def open_vhod_window(e):
            close.close_reg_window()
            vhod_column.visible = True
            go_to_reg.visible = False
            go_to_vhod.visible = False
            back_start_but.visible = True
            page.update()

        def open_vhod_window_lambda(e):
            global new_user_enter
            new_user_enter = 1
            open.open_vhod_window(1)
            close = lambda: page.close(dlg_reg)
            close()
            page.update()


    class close():
        def close_dlg(e):
            close = lambda: page.close(dlg_reg)
            close()

        def close_reg_window(e):
            reg_column.visible = False
            page.update()

        def back_start(self):
            pass




#Элементы страницы регистрации
    name_field_reg = ft.TextField(value="", hint_text="Никнейм", width=300,border_color='#FFFFFF')
    last_name_field_reg = ft.TextField(value="", hint_text="Имя", width=300,border_color='#FFFFFF')
    otchestvo_field_reg = ft.TextField(value="", hint_text="Фамилия", width=300,border_color='#FFFFFF')
    pas_field_reg=ft.TextField(hint_text="Пароль", password=True, can_reveal_password=True,width=300,border_color='#FFFFFF')
    age_field_reg = ft.TextField(value="", hint_text="Возраст", width=300,border_color='#FFFFFF')
    city_field_reg = ft.TextField(value="", hint_text="Город", width=300,border_color='#FFFFFF')
    pol_text_reg=ft.Text(value="Выберите пол",size=12, color='#FFFFFF')
    pol_vebor = ft.RadioGroup(content=ft.Column([
        ft.Radio(value="Мужской", label="Мужской",active_color='#1DB100'),
        ft.Radio(value="Женский", label="Женский",active_color='#1DB100')]))
    reg_but=ft.ElevatedButton(content=ft.Text(value="Зарегестрироваться", color='#FFFFFF'), on_click=registration,bgcolor='#1DB100')
    reg_text = ft.Text(value="Регистрация", size=30, color='#FFFFFF')

    dlg_reg = ft.AlertDialog(
        modal=True,
        title=ft.Text("Подтвердите пожалуйста"),
        content=ft.Text("Хотите перейти ко входу?"),
        actions=[
            ft.TextButton("Да", on_click=open.open_vhod_window_lambda,
                          style=ft.ButtonStyle(color='#FFFFFF', bgcolor='#1DB100')),
            ft.TextButton("Нет", on_click=close.close_dlg, style=ft.ButtonStyle(color='#FFFFFF', bgcolor='#1DB100')),
        ],
        actions_alignment=ft.MainAxisAlignment.END, bgcolor='#00321A'
    )
    reg = ft.Column([reg_text, name_field_reg, last_name_field_reg, otchestvo_field_reg, pas_field_reg,
                     age_field_reg, pol_text_reg, pol_vebor, city_field_reg,
                     reg_but], alignment=ft.alignment.center)
    reg_column = ft.Container(content=reg, alignment=ft.alignment.center)

#Элементы страницы входа
    vhod_text = ft.Text(value="Вход", size=30, color='#FFFFFF')
    name_field_vhod = ft.TextField(value="", hint_text="Никенейм", border_color='#FFFFFF')
    pas_field_vhod = ft.TextField(hint_text="Пароль", password=True, can_reveal_password=True, border_color='#FFFFFF')
    vhod_but = ft.ElevatedButton(content=ft.Text(value="Вход", color='#FFFFFF'), on_click=vhod_ac, bgcolor='#1DB100')
    vhod = ft.Column([vhod_text, name_field_vhod, pas_field_vhod, vhod_but], alignment=ft.alignment.center)
    vhod_column = ft.Container(content=vhod, alignment=ft.alignment.center)

#Элементы начальной страницы
    vhod_in_text=ft.Text(value="Уже есть аккаунт?")
    go_to_reg = ft.ElevatedButton(content=ft.Text(value="Регистрация", color='#FFFFFF'), on_click=open.open_reg_window,
                                  bgcolor='#1DB100',style=ft.ButtonStyle(elevation=None,overlay_color='GREEN600' #высота кнопки, цвет кнопки при наведении на нее курсора
    ))
    go_to_vhod = ft.ElevatedButton(content=ft.Text(value="Войти ", color='#FFFFFF'), on_click=open.open_vhod_window,
                                   style=ft.ButtonStyle(elevation=None,overlay_color='GREEN600' #высота кнопки, цвет кнопки при наведении на нее курсора
    ))
    back_start_but = ft.ElevatedButton(content=ft.Text(value="Назад", color='#FFFFFF'), on_click=close.back_start,
                                       bgcolor='#1DB100',style=ft.ButtonStyle(elevation=None,overlay_color='GREEN600' #высота кнопки, цвет кнопки при наведении на нее курсора
    ))
    start = ft.Column([go_to_reg,vhod_in_text, go_to_vhod, back_start_but])
    start_column = ft.Container(content=start)
    page.add(start_column,vhod_column,reg_column)
    page.horizontal_alignment=ft.alignment.center
    page.update()
ft.app(target=main)
